{
  "data": {
    "__schema": {
      "queryType": {
        "fields": [
          {
            "name": "node",
            "description": "Fetches an object given its globally unique `ID`.",
            "type": {
              "kind": "INTERFACE",
              "name": "Node",
              "description": "A single node object in the graph with a globally unique identifier.",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "description": "The `ID` of the node.",
                "type": {
                  "kind": "NON_NULL",
                  "name": null,
                  "description": null,
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "ID",
                    "description": "The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.",
                    "ofType": null
                  }
                }
              }
            ]
          },
          {
            "name": "searchPosts",
            "description": "Returns posts containing a given search term.",
            "type": {
              "kind": "LIST",
              "name": null,
              "description": null,
              "ofType": {
                "kind": "OBJECT",
                "name": "Post",
                "description": "A forum post written by a user.",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "search",
                "description": null,
                "type": {
                  "kind": "SCALAR",
                  "name": "String",
                  "description": "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
                  "ofType": null
                }
              }
            ]
          },
          {
            "name": "person",
            "description": "Queries a single `Person` using its primary keys.",
            "type": {
              "kind": "OBJECT",
              "name": "Person",
              "description": "A user of the forum.",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "description": "The `ID` of the `Person` node.",
                "type": {
                  "kind": "NON_NULL",
                  "name": null,
                  "description": null,
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "ID",
                    "description": "The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.",
                    "ofType": null
                  }
                }
              }
            ]
          },
          {
            "name": "personNodes",
            "description": "Queries and returns a set of items with some metatadata for `Person`. Note that cursors will not work across different `orderBy` values. If you want to reuse a cursor, make sure you don’t change `orderBy`.",
            "type": {
              "kind": "OBJECT",
              "name": "PersonConnection",
              "description": "A connection to a list of `Person` items",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "description": "The order the resulting items should be returned in. This argument is also important as it is used in creating pagination cursors. This value’s default is the primary key for the object.",
                "type": {
                  "kind": "ENUM",
                  "name": "PersonOrdering",
                  "description": "Properties with which `Person` can be ordered.",
                  "ofType": null
                }
              },
              {
                "name": "first",
                "description": "The top `n` items in the set to be returned. Can’t be used with `last`.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Int",
                  "description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",
                  "ofType": null
                }
              },
              {
                "name": "last",
                "description": "The bottom `n` items in the set to be returned. Can’t be used with `first`.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Int",
                  "description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",
                  "ofType": null
                }
              },
              {
                "name": "before",
                "description": "Constrains the set to nodes *before* this cursor in the specified ordering.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Cursor",
                  "description": "An opaque base64 encoded string describing a location in a list of items.",
                  "ofType": null
                }
              },
              {
                "name": "after",
                "description": "Constrains the set to nodes *after* this cursor in the specified ordering.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Cursor",
                  "description": "An opaque base64 encoded string describing a location in a list of items.",
                  "ofType": null
                }
              },
              {
                "name": "offset",
                "description": "An integer offset representing how many items to skip in the set.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Int",
                  "description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",
                  "ofType": null
                }
              },
              {
                "name": "descending",
                "description": "If `true` the nodes will be in descending order, if `false` the items will be in ascending order. `false` by default.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Boolean",
                  "description": "The `Boolean` scalar type represents `true` or `false`.",
                  "ofType": null
                }
              },
              {
                "name": "rowId",
                "description": "Filters the resulting set with an equality test on the `rowId` field.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Int",
                  "description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",
                  "ofType": null
                }
              },
              {
                "name": "givenName",
                "description": "Filters the resulting set with an equality test on the `givenName` field.",
                "type": {
                  "kind": "SCALAR",
                  "name": "String",
                  "description": "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
                  "ofType": null
                }
              },
              {
                "name": "familyName",
                "description": "Filters the resulting set with an equality test on the `familyName` field.",
                "type": {
                  "kind": "SCALAR",
                  "name": "String",
                  "description": "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
                  "ofType": null
                }
              },
              {
                "name": "about",
                "description": "Filters the resulting set with an equality test on the `about` field.",
                "type": {
                  "kind": "SCALAR",
                  "name": "String",
                  "description": "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
                  "ofType": null
                }
              },
              {
                "name": "createdAt",
                "description": "Filters the resulting set with an equality test on the `createdAt` field.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Date",
                  "description": "Some time value",
                  "ofType": null
                }
              },
              {
                "name": "updatedAt",
                "description": "Filters the resulting set with an equality test on the `updatedAt` field.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Date",
                  "description": "Some time value",
                  "ofType": null
                }
              }
            ]
          },
          {
            "name": "post",
            "description": "Queries a single `Post` using its primary keys.",
            "type": {
              "kind": "OBJECT",
              "name": "Post",
              "description": "A forum post written by a user.",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "description": "The `ID` of the `Post` node.",
                "type": {
                  "kind": "NON_NULL",
                  "name": null,
                  "description": null,
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "ID",
                    "description": "The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.",
                    "ofType": null
                  }
                }
              }
            ]
          },
          {
            "name": "postNodes",
            "description": "Queries and returns a set of items with some metatadata for `Post`. Note that cursors will not work across different `orderBy` values. If you want to reuse a cursor, make sure you don’t change `orderBy`.",
            "type": {
              "kind": "OBJECT",
              "name": "PostConnection",
              "description": "A connection to a list of `Post` items",
              "ofType": null
            },
            "args": [
              {
                "name": "orderBy",
                "description": "The order the resulting items should be returned in. This argument is also important as it is used in creating pagination cursors. This value’s default is the primary key for the object.",
                "type": {
                  "kind": "ENUM",
                  "name": "PostOrdering",
                  "description": "Properties with which `Post` can be ordered.",
                  "ofType": null
                }
              },
              {
                "name": "first",
                "description": "The top `n` items in the set to be returned. Can’t be used with `last`.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Int",
                  "description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",
                  "ofType": null
                }
              },
              {
                "name": "last",
                "description": "The bottom `n` items in the set to be returned. Can’t be used with `first`.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Int",
                  "description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",
                  "ofType": null
                }
              },
              {
                "name": "before",
                "description": "Constrains the set to nodes *before* this cursor in the specified ordering.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Cursor",
                  "description": "An opaque base64 encoded string describing a location in a list of items.",
                  "ofType": null
                }
              },
              {
                "name": "after",
                "description": "Constrains the set to nodes *after* this cursor in the specified ordering.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Cursor",
                  "description": "An opaque base64 encoded string describing a location in a list of items.",
                  "ofType": null
                }
              },
              {
                "name": "offset",
                "description": "An integer offset representing how many items to skip in the set.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Int",
                  "description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",
                  "ofType": null
                }
              },
              {
                "name": "descending",
                "description": "If `true` the nodes will be in descending order, if `false` the items will be in ascending order. `false` by default.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Boolean",
                  "description": "The `Boolean` scalar type represents `true` or `false`.",
                  "ofType": null
                }
              },
              {
                "name": "rowId",
                "description": "Filters the resulting set with an equality test on the `rowId` field.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Int",
                  "description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",
                  "ofType": null
                }
              },
              {
                "name": "authorId",
                "description": "Filters the resulting set with an equality test on the `authorId` field.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Int",
                  "description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",
                  "ofType": null
                }
              },
              {
                "name": "headline",
                "description": "Filters the resulting set with an equality test on the `headline` field.",
                "type": {
                  "kind": "SCALAR",
                  "name": "String",
                  "description": "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
                  "ofType": null
                }
              },
              {
                "name": "topic",
                "description": "Filters the resulting set with an equality test on the `topic` field.",
                "type": {
                  "kind": "ENUM",
                  "name": "PostTopic",
                  "description": null,
                  "ofType": null
                }
              },
              {
                "name": "body",
                "description": "Filters the resulting set with an equality test on the `body` field.",
                "type": {
                  "kind": "SCALAR",
                  "name": "String",
                  "description": "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
                  "ofType": null
                }
              },
              {
                "name": "createdAt",
                "description": "Filters the resulting set with an equality test on the `createdAt` field.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Date",
                  "description": "Some time value",
                  "ofType": null
                }
              },
              {
                "name": "updatedAt",
                "description": "Filters the resulting set with an equality test on the `updatedAt` field.",
                "type": {
                  "kind": "SCALAR",
                  "name": "Date",
                  "description": "Some time value",
                  "ofType": null
                }
              }
            ]
          }
        ]
      }
    }
  }
}
