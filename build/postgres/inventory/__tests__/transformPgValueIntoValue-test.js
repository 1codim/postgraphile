"use strict";
const interface_1 = require('../../../interface');
const transformPgValueIntoValue_1 = require('../transformPgValueIntoValue');
test('will call $$transformPgValueIntoValue if the type has the property', () => {
    const type = { [transformPgValueIntoValue_1.$$transformPgValueIntoValue]: jest.fn(x => x) };
    const value = Symbol();
    expect(transformPgValueIntoValue_1.default(type, value)).toBe(value);
    expect(type[transformPgValueIntoValue_1.$$transformPgValueIntoValue].mock.calls).toEqual([[value]]);
});
test('will return the value for boolean, integer, float, and string types', () => {
    expect(transformPgValueIntoValue_1.default(interface_1.booleanType, true)).toEqual(true);
    expect(transformPgValueIntoValue_1.default(interface_1.integerType, 2)).toEqual(2);
    expect(transformPgValueIntoValue_1.default(interface_1.floatType, 2.5)).toEqual(2.5);
    expect(transformPgValueIntoValue_1.default(interface_1.stringType, 'abc')).toEqual('abc');
});
test('will return the value for enums', () => {
    expect(transformPgValueIntoValue_1.default(new interface_1.EnumType({ name: 'foo', variants: ['a', 'b', 'c'] }), 'b')).toEqual('b');
});
test('will eagerly return null for NullableType, otherwise calling on the non-null type', () => {
    const type = new interface_1.NullableType({ [transformPgValueIntoValue_1.$$transformPgValueIntoValue]: jest.fn(x => x) });
    const value = Symbol();
    expect(transformPgValueIntoValue_1.default(type, null)).toEqual(null);
    expect(transformPgValueIntoValue_1.default(type, value)).toBe(value);
    expect(type.nonNullType[transformPgValueIntoValue_1.$$transformPgValueIntoValue].mock.calls).toEqual([[value]]);
});
test('will recursively call for every item with ListType', () => {
    const type = new interface_1.ListType({ [transformPgValueIntoValue_1.$$transformPgValueIntoValue]: jest.fn(x => x) });
    const value = [Symbol(), Symbol(), Symbol()];
    expect(transformPgValueIntoValue_1.default(type, [])).toEqual([]);
    expect(transformPgValueIntoValue_1.default(type, value)).toEqual(value);
    expect(type.itemType[transformPgValueIntoValue_1.$$transformPgValueIntoValue].mock.calls).toEqual([[value[0]], [value[1]], [value[2]]]);
});
test('will convert ObjectType into a map and recursively call transformPgValueIntoValue', () => {
    const type = new interface_1.ObjectType({
        name: 'foo',
        fields: new Map([
            ['a', { type: { [transformPgValueIntoValue_1.$$transformPgValueIntoValue]: jest.fn(x => x) } }],
            ['b', { type: { [transformPgValueIntoValue_1.$$transformPgValueIntoValue]: jest.fn(x => x) } }],
            ['c', { type: { [transformPgValueIntoValue_1.$$transformPgValueIntoValue]: jest.fn(x => x) } }],
        ]),
    });
    expect(transformPgValueIntoValue_1.default(type, { a: 1, b: 2, c: 3 })).toEqual(new Map([['a', 1], ['b', 2], ['c', 3]]));
    expect(type.fields.get('a').type[transformPgValueIntoValue_1.$$transformPgValueIntoValue].mock.calls).toEqual([[1]]);
    expect(type.fields.get('b').type[transformPgValueIntoValue_1.$$transformPgValueIntoValue].mock.calls).toEqual([[2]]);
    expect(type.fields.get('c').type[transformPgValueIntoValue_1.$$transformPgValueIntoValue].mock.calls).toEqual([[3]]);
});
test('will throw an error with type ObjectType and value null', () => {
    const type = new interface_1.ObjectType({
        name: 'foo',
        fields: new Map([
            ['a', { type: { [transformPgValueIntoValue_1.$$transformPgValueIntoValue]: jest.fn(x => x) } }],
            ['b', { type: { [transformPgValueIntoValue_1.$$transformPgValueIntoValue]: jest.fn(x => x) } }],
            ['c', { type: { [transformPgValueIntoValue_1.$$transformPgValueIntoValue]: jest.fn(x => x) } }],
        ]),
    });
    expect(() => transformPgValueIntoValue_1.default(type, null)).toThrow('Postgres value of object type may not be nullish.');
});
test('will throw an error with type ObjectType and a value that is not an object', () => {
    const type = new interface_1.ObjectType({
        name: 'foo',
        fields: new Map([
            ['a', { type: { [transformPgValueIntoValue_1.$$transformPgValueIntoValue]: jest.fn(x => x) } }],
            ['b', { type: { [transformPgValueIntoValue_1.$$transformPgValueIntoValue]: jest.fn(x => x) } }],
            ['c', { type: { [transformPgValueIntoValue_1.$$transformPgValueIntoValue]: jest.fn(x => x) } }],
        ]),
    });
    expect(() => transformPgValueIntoValue_1.default(type, 5)).toThrow('Postgres value of object type must be an object, not \'number\'.');
});
test('will throw an error when the type is not recognized', () => {
    expect(() => transformPgValueIntoValue_1.default({}, 2)).toThrow('Type \'[object Object]\' is not a valid type for converting Postgres values into interface values.');
});
test('will run the transform on an alias base type', () => {
    const type = new interface_1.AliasType({
        name: 'foo',
        baseType: { [transformPgValueIntoValue_1.$$transformPgValueIntoValue]: jest.fn(x => x) },
    });
    const value = Symbol('value');
    expect(transformPgValueIntoValue_1.default(type, value)).toBe(value);
    expect(type.baseType[transformPgValueIntoValue_1.$$transformPgValueIntoValue].mock.calls).toEqual([[value]]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtUGdWYWx1ZUludG9WYWx1ZS10ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Bvc3RncmVzL2ludmVudG9yeS9fX3Rlc3RzX18vdHJhbnNmb3JtUGdWYWx1ZUludG9WYWx1ZS10ZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0QkFVTyxvQkFDUCxDQUFDLENBRDBCO0FBQzNCLDRDQUF1RSw4QkFFdkUsQ0FBQyxDQUZvRztBQUVyRyxJQUFJLENBQUMsb0VBQW9FLEVBQUU7SUFDekUsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLHVEQUEyQixDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQTtJQUMvRCxNQUFNLEtBQUssR0FBRyxNQUFNLEVBQUUsQ0FBQTtJQUN0QixNQUFNLENBQUMsbUNBQXlCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzFELE1BQU0sQ0FBQyxJQUFJLENBQUMsdURBQTJCLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDekUsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMscUVBQXFFLEVBQUU7SUFDMUUsTUFBTSxDQUFDLG1DQUF5QixDQUFDLHVCQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEUsTUFBTSxDQUFDLG1DQUF5QixDQUFDLHVCQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDNUQsTUFBTSxDQUFDLG1DQUF5QixDQUFDLHFCQUFTLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFD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