"use strict";
const sql_1 = require('../../utils/sql');
const conditionToSql_1 = require('../conditionToSql');
test('will correctly output true and false constants', () => {
    expect(conditionToSql_1.default(true)).toEqual(sql_1.default.query `true`);
    expect(conditionToSql_1.default(false)).toEqual(sql_1.default.query `false`);
});
test('will output the not condition', () => {
    expect(conditionToSql_1.default({ type: 'NOT', condition: true }))
        .toEqual(sql_1.default.query `not(${conditionToSql_1.default(true)})`);
    expect(conditionToSql_1.default({ type: 'NOT', condition: { type: 'NOT', condition: false } }))
        .toEqual(sql_1.default.query `not(${sql_1.default.query `not(${conditionToSql_1.default(false)})`})`);
});
test('will join multiple conditions with and', () => {
    expect(conditionToSql_1.default({ type: 'AND', conditions: [true, false, true] }))
        .toEqual(sql_1.default.query `(${conditionToSql_1.default(true)} and ${conditionToSql_1.default(false)} and ${conditionToSql_1.default(true)})`);
});
test('will join multiple conditions with or', () => {
    expect(conditionToSql_1.default({ type: 'OR', conditions: [false, true, false] }))
        .toEqual(sql_1.default.query `(${conditionToSql_1.default(false)} or ${conditionToSql_1.default(true)} or ${conditionToSql_1.default(false)})`);
});
test('will check equality', () => {
    const value = Symbol('value');
    expect(conditionToSql_1.default({ type: 'EQUAL', value }))
        .toEqual(sql_1.default.query `(${sql_1.default.identifier()} = ${sql_1.default.value(value)})`);
    expect(conditionToSql_1.default({ type: 'EQUAL', value }, ['a', 'b', 'c']))
        .toEqual(sql_1.default.query `(${sql_1.default.identifier('a', 'b', 'c')} = ${sql_1.default.value(value)})`);
});
test('will check less than', () => {
    const value = Symbol('value');
    expect(conditionToSql_1.default({ type: 'LESS_THAN', value }))
        .toEqual(sql_1.default.query `(${sql_1.default.identifier()} < ${sql_1.default.value(value)})`);
    expect(conditionToSql_1.default({ type: 'LESS_THAN', value }, ['a', 'b', 'c']))
        .toEqual(sql_1.default.query `(${sql_1.default.identifier('a', 'b', 'c')} < ${sql_1.default.value(value)})`);
});
test('will check greater than', () => {
    const value = Symbol('value');
    expect(conditionToSql_1.default({ type: 'GREATER_THAN', value }))
        .toEqual(sql_1.default.query `(${sql_1.default.identifier()} > ${sql_1.default.value(value)})`);
    expect(conditionToSql_1.default({ type: 'GREATER_THAN', value }, ['a', 'b', 'c']))
        .toEqual(sql_1.default.query `(${sql_1.default.identifier('a', 'b', 'c')} > ${sql_1.default.value(value)})`);
});
test('will test for regular expressions', () => {
    const regexp = /./g;
    expect(conditionToSql_1.default({ type: 'REGEXP', regexp }))
        .toEqual(sql_1.default.query `regexp_matches(${sql_1.default.identifier()}, ${sql_1.default.value('.')}, ${sql_1.default.value('g')})`);
    expect(conditionToSql_1.default({ type: 'REGEXP', regexp }, ['a', 'b', 'c']))
        .toEqual(sql_1.default.query `regexp_matches(${sql_1.default.identifier('a', 'b', 'c')}, ${sql_1.default.value('.')}, ${sql_1.default.value('g')})`);
});
test('will set the path for child conditions with the field condition', () => {
    const value = Symbol('value');
    expect(conditionToSql_1.default({ type: 'FIELD', name: 'a', condition: { type: 'EQUAL', value } }))
        .toEqual(conditionToSql_1.default({ type: 'EQUAL', value }, ['a']));
    expect(conditionToSql_1.default({ type: 'FIELD', name: 'd', condition: { type: 'EQUAL', value } }, ['a', 'b', 'c']))
        .toEqual(conditionToSql_1.default({ type: 'EQUAL', value }, ['a', 'b', 'c', 'd']));
});
test('integration test 1', () => {
    const condition = {
        type: 'AND',
        conditions: [
            true,
            { type: 'NOT', condition: false },
            { type: 'FIELD', name: 'a', condition: { type: 'EQUAL', value: 42 } },
            { type: 'FIELD', name: 'a', condition: { type: 'FIELD', name: 'b', condition: { type: 'LESS_THAN', value: 45 } } },
            {
                type: 'FIELD',
                name: 'c',
                condition: {
                    type: 'NOT',
                    condition: {
                        type: 'OR',
                        conditions: [
                            { type: 'GREATER_THAN', value: 5 },
                            { type: 'EQUAL', value: 5 },
                        ],
                    },
                },
            },
        ],
    };
    expect(sql_1.default.compile(conditionToSql_1.default(condition))).toEqual({
        name: undefined,
        text: '(true and not(false) and ("a" = $1) and ("a"."b" < $2) and not((("c" > $3) or ("c" = $4))))',
        values: [42, 45, 5, 5],
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uVG9TcWwtdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wb3N0Z3Jlcy9pbnZlbnRvcnkvX190ZXN0c19fL2NvbmRpdGlvblRvU3FsLXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHNCQUFnQixpQkFDaEIsQ0FBQyxDQURnQztBQUNqQyxpQ0FBMkIsbUJBRTNCLENBQUMsQ0FGNkM7QUFFOUMsSUFBSSxDQUFDLGdEQUFnRCxFQUFFO0lBQ3JELE1BQU0sQ0FBQyx3QkFBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQUcsQ0FBQyxLQUFLLENBQUEsTUFBTSxDQUFDLENBQUE7SUFDckQsTUFBTSxDQUFDLHdCQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBRyxDQUFDLEtBQUssQ0FBQSxPQUFPLENBQUMsQ0FBQTtBQUN6RCxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQywrQkFBK0IsRUFBRTtJQUNwQyxNQUFNLENBQUMsd0JBQWMsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDckQsT0FBTyxDQUFDLGFBQUcsQ0FBQyxLQUFLLENBQUEsT0FBTyx3QkFBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNuRCxNQUFNLENBQUMsd0JBQWMsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ2xGLE9BQU8sQ0FBQyxhQUFHLENBQUMsS0FBSyxDQUFBLE9BQU8sYUFBRyxDQUFDLEtBQUssQ0FBQSxPQUFPLHdCQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUE7QUFDekUsQ0FBQyxDQUFDLENBQUE7QUFF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