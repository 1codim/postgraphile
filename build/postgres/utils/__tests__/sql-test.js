/* tslint:disable no-any */
"use strict";
const sql_1 = require('../sql');
test('raw will create a raw Sql item', () => {
    const text = 'abcdefg\'hijk-lmn"op';
    expect(sql_1.default.raw(text)).toEqual({ type: 'RAW', text });
});
test('identifier will create an identifier Sql item', () => {
    const name = 'abcdefg\'hijk-lmn"op';
    expect(sql_1.default.identifier(name)).toEqual({ type: 'IDENTIFIER', names: [name] });
});
test('identifier will create an identifier Sql item with multiple names', () => {
    const name1 = 'name1';
    const name2 = 'name2';
    const name3 = 'name3';
    expect(sql_1.default.identifier(name1, name2, name3)).toEqual({ type: 'IDENTIFIER', names: [name1, name2, name3] });
});
test('value will create an eager Sql value', () => {
    const value = Symbol('value');
    expect(sql_1.default.value(value)).toEqual({ type: 'VALUE', value });
});
test('join will flatten singly nested arrays', () => {
    const item1 = Symbol('item1');
    const item2 = Symbol('item2');
    const item3 = Symbol('item3');
    const item4 = Symbol('item4');
    const item5 = Symbol('item5');
    expect(sql_1.default.join([item1, [item2, item3], item4, [item5]])).toEqual([item1, item2, item3, item4, item5]);
});
test('join will add raw Sql seperators if supplied a string', () => {
    const seperator = Symbol('seperator');
    const item1 = Symbol('item1');
    const item2 = Symbol('item2');
    const item3 = Symbol('item3');
    expect(sql_1.default.join([item1, item2, item3], seperator))
        .toEqual([item1, sql_1.default.raw(seperator), item2, sql_1.default.raw(seperator), item3]);
});
test('join will not add raw Sql seperators between nested arrays', () => {
    const seperator = Symbol('seperator');
    const item1 = Symbol('item1');
    const item2 = Symbol('item2');
    const item3 = Symbol('item3');
    const item4 = Symbol('item4');
    const item5 = Symbol('item5');
    expect(sql_1.default.join([item1, [item2, item3], item4, [item5]], seperator))
        .toEqual([item1, sql_1.default.raw(seperator), item2, item3, sql_1.default.raw(seperator), item4, sql_1.default.raw(seperator), item5]);
});
test('query will output raw strings', () => {
    expect(sql_1.default.query `hello world`).toEqual([sql_1.default.raw('hello world')]);
});
test('query will add items to the Sql', () => {
    const item1 = Symbol('item1');
    const item2 = Symbol('item2');
    const item3 = Symbol('item3');
    expect(sql_1.default.query `hello ${item1}${item2} world ${item3}`)
        .toEqual([sql_1.default.raw('hello '), item1, sql_1.default.raw(''), item2, sql_1.default.raw(' world '), item3, sql_1.default.raw('')]);
});
test('query will flatten arrays of items', () => {
    const item1 = Symbol('item1');
    const item2 = Symbol('item2');
    const item3 = Symbol('item3');
    expect(sql_1.default.query `${[item1, item2, item3]}`).toEqual([sql_1.default.raw(''), item1, item2, item3, sql_1.default.raw('')]);
});
test('compile will return an empty config for no items', () => {
    expect(sql_1.default.compile([])).toEqual({
        text: '',
        values: [],
    });
});
test('compile will turn a raw text only query into a simple config', () => {
    expect(sql_1.default.compile([sql_1.default.raw('hello world')])).toEqual({
        text: 'hello world',
        values: [],
    });
});
test('compile will add raw queries together', () => {
    expect(sql_1.default.compile([sql_1.default.raw('hello'), sql_1.default.raw(' '), sql_1.default.raw('world')])).toEqual({
        text: 'hello world',
        values: [],
    });
});
test('compile will add identifiers as text strings', () => {
    expect(sql_1.default.compile([sql_1.default.identifier('hello')])).toEqual({
        text: '"hello"',
        values: [],
    });
    expect(sql_1.default.compile([sql_1.default.identifier('a', 'b', 'c')])).toEqual({
        text: '"a"."b"."c"',
        values: [],
    });
});
test('compile will remove double quotes in identifiers', () => {
    expect(sql_1.default.compile([sql_1.default.identifier('yo"yo')])).toEqual({
        text: '"yo""yo"',
        values: [],
    });
});
test('compile will throw an error when identifiers are an empty array', () => {
    expect(() => sql_1.default.compile([sql_1.default.identifier()])).toThrow();
});
test('compile will add identifiers to raw queries', () => {
    expect(sql_1.default.compile([sql_1.default.raw('hello '), sql_1.default.identifier('a', 'b', 'c'), sql_1.default.raw(' world')])).toEqual({
        text: 'hello "a"."b"."c" world',
        values: [],
    });
});
test('compile will add value parameters for eager values', () => {
    const value = Symbol('value');
    expect(sql_1.default.compile([sql_1.default.value(value)])).toEqual({
        text: '$1',
        values: [value],
    });
});
test('compile will add multiple value parameters for eager values', () => {
    const value1 = Symbol('value1');
    const value2 = Symbol('value2');
    const value3 = Symbol('value3');
    const value4 = Symbol('value4');
    expect(sql_1.default.compile([sql_1.default.value(value1), sql_1.default.value(value2), sql_1.default.raw(' '), sql_1.default.value(value3), sql_1.default.raw(' '), sql_1.default.value(value4)])).toEqual({
        text: '$1$2 $3 $4',
        values: [value1, value2, value3, value4],
    });
});
test('compile will create local identifiers for symbols', () => {
    const a = Symbol();
    const b = Symbol();
    expect(sql_1.default.compile([sql_1.default.identifier(a), sql_1.default.raw(' '), sql_1.default.identifier(a, 'hello', b), sql_1.default.raw(' '), sql_1.default.identifier(b), sql_1.default.raw(' '), sql_1.default.identifier(a)])).toEqual({
        text: '__local_0__ __local_0__."hello".__local_1__ __local_1__ __local_0__',
        values: [],
    });
});
test('integration test 1', () => {
    expect(sql_1.default.compile(sql_1.default.query `hello ${sql_1.default.value(42)} world, ${sql_1.default.value('cowabunga')} and ${sql_1.default.query `wow ${sql_1.default.identifier('yo')}`}`)).toEqual({
        name: undefined,
        text: 'hello $1 world, $2 and wow "yo"',
        values: [42, 'cowabunga'],
    });
});
//# sourceMappingURL=data:application/json;base64,