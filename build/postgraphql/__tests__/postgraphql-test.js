"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
jest.mock('pg');
jest.mock('pg-connection-string');
jest.mock('../schema/createPostGraphQLSchema');
jest.mock('../http/createPostGraphQLHttpRequestHandler');
jest.mock('../watch/watchPgSchemas');
const pg_1 = require('pg');
const pg_connection_string_1 = require('pg-connection-string');
const createPostGraphQLSchema_1 = require('../schema/createPostGraphQLSchema');
const createPostGraphQLHttpRequestHandler_1 = require('../http/createPostGraphQLHttpRequestHandler');
const watchPgSchemas_1 = require('../watch/watchPgSchemas');
const postgraphql_1 = require('../postgraphql');
const chalk = require('chalk');
createPostGraphQLHttpRequestHandler_1.default.mockImplementation(({ getGqlSchema }) => Promise.resolve(getGqlSchema()).then(() => null));
watchPgSchemas_1.default.mockImplementation(() => Promise.resolve());
test('will use the first parameter as the pool if it is an instance of `Pool`', () => __awaiter(this, void 0, void 0, function* () {
    const pgPool = new pg_1.Pool();
    yield postgraphql_1.default(pgPool);
    expect(pgPool.connect.mock.calls).toEqual([[]]);
    expect(createPostGraphQLHttpRequestHandler_1.default.mock.calls.length).toBe(1);
    expect(createPostGraphQLHttpRequestHandler_1.default.mock.calls[0][0].pgPool).toBe(pgPool);
}));
test('will use the config to create a new pool', () => __awaiter(this, void 0, void 0, function* () {
    pg_1.Pool.mockClear();
    createPostGraphQLHttpRequestHandler_1.default.mockClear();
    const pgPoolConfig = Symbol('pgPoolConfig');
    yield postgraphql_1.default(pgPoolConfig);
    expect(pg_1.Pool.mock.calls).toEqual([[pgPoolConfig]]);
    expect(pg_1.Pool.mock.instances[0].connect.mock.calls).toEqual([[]]);
    expect(createPostGraphQLHttpRequestHandler_1.default.mock.calls.length).toBe(1);
    expect(createPostGraphQLHttpRequestHandler_1.default.mock.calls[0][0].pgPool).toBe(pg_1.Pool.mock.instances[0]);
}));
test('will parse a string config before creating a new pool', () => __awaiter(this, void 0, void 0, function* () {
    pg_1.Pool.mockClear();
    createPostGraphQLHttpRequestHandler_1.default.mockClear();
    pg_connection_string_1.parse.mockClear();
    const pgPoolConnectionString = 'abcdefghijklmnopqrstuvwxyz';
    const pgPoolConfig = Symbol('pgPoolConfig');
    pg_connection_string_1.parse.mockReturnValueOnce(pgPoolConfig);
    yield postgraphql_1.default(pgPoolConnectionString);
    expect(pg_connection_string_1.parse.mock.calls).toEqual([[pgPoolConnectionString]]);
    expect(pg_1.Pool.mock.calls).toEqual([[pgPoolConfig]]);
    expect(pg_1.Pool.mock.instances[0].connect.mock.calls).toEqual([[]]);
    expect(createPostGraphQLHttpRequestHandler_1.default.mock.calls.length).toBe(1);
    expect(createPostGraphQLHttpRequestHandler_1.default.mock.calls[0][0].pgPool).toBe(pg_1.Pool.mock.instances[0]);
}));
test('will use a connected client from the pool, the schemas, and options to create a GraphQL schema', () => __awaiter(this, void 0, void 0, function* () {
    createPostGraphQLSchema_1.default.mockClear();
    createPostGraphQLHttpRequestHandler_1.default.mockClear();
    const pgPool = new pg_1.Pool();
    const schemas = [Symbol('schemas')];
    const options = Symbol('options');
    const pgClient = { release: jest.fn() };
    pgPool.connect.mockReturnValue(Promise.resolve(pgClient));
    yield postgraphql_1.default(pgPool, schemas, options);
    expect(pgPool.connect.mock.calls).toEqual([[]]);
    expect(createPostGraphQLSchema_1.default.mock.calls).toEqual([[pgClient, schemas, options]]);
    expect(pgClient.release.mock.calls).toEqual([[]]);
}));
test('will use a connected client from the pool, the default schema, and options to create a GraphQL schema', () => __awaiter(this, void 0, void 0, function* () {
    createPostGraphQLSchema_1.default.mockClear();
    createPostGraphQLHttpRequestHandler_1.default.mockClear();
    const pgPool = new pg_1.Pool();
    const options = Symbol('options');
    const pgClient = { release: jest.fn() };
    pgPool.connect.mockReturnValue(Promise.resolve(pgClient));
    yield postgraphql_1.default(pgPool, options);
    expect(pgPool.connect.mock.calls).toEqual([[]]);
    expect(createPostGraphQLSchema_1.default.mock.calls).toEqual([[pgClient, ['public'], options]]);
    expect(pgClient.release.mock.calls).toEqual([[]]);
}));
test('will use a created GraphQL schema to create the HTTP request handler and pass down options', () => __awaiter(this, void 0, void 0, function* () {
    createPostGraphQLHttpRequestHandler_1.default.mockClear();
    const pgPool = new pg_1.Pool();
    const gqlSchema = Symbol('gqlSchema');
    const options = { a: 1, b: 2, c: 3 };
    createPostGraphQLSchema_1.default.mockReturnValueOnce(Promise.resolve(gqlSchema));
    yield postgraphql_1.default(pgPool, [], options);
    expect(createPostGraphQLHttpRequestHandler_1.default.mock.calls.length).toBe(1);
    expect(createPostGraphQLHttpRequestHandler_1.default.mock.calls[0].length).toBe(1);
    expect(Object.keys(createPostGraphQLHttpRequestHandler_1.default.mock.calls[0][0])).toEqual(['a', 'b', 'c', 'getGqlSchema', 'pgPool']);
    expect(createPostGraphQLHttpRequestHandler_1.default.mock.calls[0][0].pgPool).toBe(pgPool);
    expect(createPostGraphQLHttpRequestHandler_1.default.mock.calls[0][0].a).toBe(options.a);
    expect(createPostGraphQLHttpRequestHandler_1.default.mock.calls[0][0].b).toBe(options.b);
    expect(createPostGraphQLHttpRequestHandler_1.default.mock.calls[0][0].c).toBe(options.c);
    expect(yield createPostGraphQLHttpRequestHandler_1.default.mock.calls[0][0].getGqlSchema()).toBe(gqlSchema);
}));
test('will watch Postgres schemas when `watchPg` is true', () => __awaiter(this, void 0, void 0, function* () {
    const pgPool = new pg_1.Pool();
    const pgSchemas = [Symbol('a'), Symbol('b'), Symbol('c')];
    yield postgraphql_1.default(pgPool, pgSchemas, { watchPg: false });
    yield postgraphql_1.default(pgPool, pgSchemas, { watchPg: true });
    expect(watchPgSchemas_1.default.mock.calls.length).toBe(1);
    expect(watchPgSchemas_1.default.mock.calls[0].length).toBe(1);
    expect(Object.keys(watchPgSchemas_1.default.mock.calls[0][0])).toEqual(['pgPool', 'pgSchemas', 'onChange']);
    expect(watchPgSchemas_1.default.mock.calls[0][0].pgPool).toBe(pgPool);
    expect(watchPgSchemas_1.default.mock.calls[0][0].pgSchemas).toBe(pgSchemas);
    expect(typeof watchPgSchemas_1.default.mock.calls[0][0].onChange).toBe('function');
}));
test('will create a new PostGraphQL schema on when `watchPgSchemas` emits a change', () => __awaiter(this, void 0, void 0, function* () {
    watchPgSchemas_1.default.mockClear();
    createPostGraphQLHttpRequestHandler_1.default.mockClear();
    const gqlSchemas = [Symbol('a'), Symbol('b'), Symbol('c')];
    let gqlSchemaI = 0;
    createPostGraphQLSchema_1.default.mockClear();
    createPostGraphQLSchema_1.default.mockImplementation(() => Promise.resolve(gqlSchemas[gqlSchemaI++]));
    const pgPool = new pg_1.Pool();
    const pgClient = { release: jest.fn() };
    pgPool.connect.mockReturnValue(Promise.resolve(pgClient));
    const mockLog = jest.fn();
    const origLog = console.log;
    console.log = mockLog;
    yield postgraphql_1.default(pgPool, [], { watchPg: true });
    const { onChange } = watchPgSchemas_1.default.mock.calls[0][0];
    const { getGqlSchema } = createPostGraphQLHttpRequestHandler_1.default.mock.calls[0][0];
    expect(pgPool.connect.mock.calls).toEqual([[]]);
    expect(pgClient.release.mock.calls).toEqual([[]]);
    expect(yield getGqlSchema()).toBe(gqlSchemas[0]);
    onChange({ commands: ['a', 'b', 'c'] });
    expect(yield getGqlSchema()).toBe(gqlSchemas[1]);
    onChange({ commands: ['d', 'e'] });
    expect(yield getGqlSchema()).toBe(gqlSchemas[2]);
    expect(pgPool.connect.mock.calls).toEqual([[], [], []]);
    expect(pgClient.release.mock.calls).toEqual([[], [], []]);
    expect(mockLog.mock.calls).toEqual([
        [`Restarting PostGraphQL API after Postgres command(s): ️${chalk.bold.cyan('a')}, ${chalk.bold.cyan('b')}, ${chalk.bold.cyan('c')}`],
        [`Restarting PostGraphQL API after Postgres command(s): ️${chalk.bold.cyan('d')}, ${chalk.bold.cyan('e')}`],
    ]);
    console.log = origLog;
}));
//# sourceMappingURL=data:application/json;base64,