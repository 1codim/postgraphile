"use strict";
jest.mock('jsonwebtoken');
const jsonwebtoken_1 = require('jsonwebtoken');
const graphql_1 = require('graphql');
const interface_1 = require('../../../../interface');
const getJwtGqlType_1 = require('../getJwtGqlType');
jsonwebtoken_1.sign.mockImplementation(tokenObject => tokenObject);
test('will create a GraphQL scalar type', () => {
    expect(getJwtGqlType_1._createJwtGqlType(new interface_1.NamedType({ name: 'foo' })) instanceof graphql_1.GraphQLScalarType).toBe(true);
});
test('will use the name from the named type', () => {
    expect(getJwtGqlType_1._createJwtGqlType(new interface_1.NamedType({ name: 'foo_bar' })).name).toBe('FooBar');
    expect(getJwtGqlType_1._createJwtGqlType(new interface_1.NullableType(new interface_1.NamedType({ name: 'foo_bar' }))).name).toBe('FooBar');
});
test('will sign a JWT when serialized', () => {
    const jwtSecret = Symbol('jwtSecret');
    const type = getJwtGqlType_1._createJwtGqlType(new interface_1.NamedType({ name: 'foo' }), jwtSecret);
    expect(type.serialize({ a: 1, b: 2, c: 3 })).toEqual(null);
    expect(type.serialize(null)).toEqual(null);
    expect(type.serialize(new Map([['a', 1], ['b', 2], ['c', 3]]))).toEqual({ a: 1, b: 2, c: 3 });
    expect(type.serialize(new Map([['a', 1], ['b', 2], ['c', 3], ['exp', 5000]]))).toEqual({ a: 1, b: 2, c: 3, exp: 5000 });
    expect(jsonwebtoken_1.sign.mock.calls).toEqual([
        [{ a: 1, b: 2, c: 3 }, jwtSecret, { audience: 'postgraphql', issuer: 'postgraphql', expiresIn: '1 day' }],
        [{ a: 1, b: 2, c: 3, exp: 5000 }, jwtSecret, { audience: 'postgraphql', issuer: 'postgraphql', expiresIn: undefined }],
    ]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Snd0R3FsVHlwZS10ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3Bvc3RncmFwaHFsL3NjaGVtYS9hdXRoL19fdGVzdHNfXy9nZXRKd3RHcWxUeXBlLXRlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUE7QUFFekIsK0JBQWdDLGNBQ2hDLENBQUMsQ0FENkM7QUFDOUMsMEJBQWtDLFNBQ2xDLENBQUMsQ0FEMEM7QUFDM0MsNEJBQXdDLHVCQUN4QyxDQUFDLENBRDhEO0FBQy9ELGdDQUFrQyxrQkFFbEMsQ0FBQyxDQUZtRDtBQUVwRCxtQkFBTyxDQUFDLGtCQUFrQixDQUFDLFdBQVcsSUFBSSxXQUFXLENBQUMsQ0FBQTtBQUV0RCxJQUFJLENBQUMsbUNBQW1DLEVBQUU7SUFDeEMsTUFBTSxDQUFDLGlDQUFpQixDQUFDLElBQUkscUJBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLFlBQVksMkJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDbkcsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsdUNBQXVDLEVBQUU7SUFDNUMsTUFBTSxDQUFDLGlDQUFpQixDQUFDLElBQUkscUJBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ2pGLE1BQU0sQ0FBQyxpQ0FBaUIsQ0FBQyxJQUFJLHdCQUFZLENBQUMsSUFBSSxxQkFBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNyRyxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyxpQ0FBaUMsRUFBRTtJQUN0QyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDckMsTUFBTSxJQUFJLEdBQUcsaUNBQWlCLENBQUMsSUFBSSxxQkFBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDekUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDMUQsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM3RixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDdkgsTUFBTSxDQUFDLG1CQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNqQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ3pHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsQ0FBQztLQUN2SCxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSJ9