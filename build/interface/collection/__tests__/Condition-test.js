"use strict";
const Condition_1 = require('../Condition');
test('and will throw when there are no conditions', () => {
    expect(() => Condition_1.conditionHelpers.and()).toThrow('Cannot have 0 conditions, must have at least 1.');
});
test('and will return false if there is one false', () => {
    expect(Condition_1.conditionHelpers.and(true, { type: 'EQUAL', value: 2 }, true, false, true)).toEqual(false);
});
test('and will return true if all are true', () => {
    expect(Condition_1.conditionHelpers.and(true, true, true, true, true)).toEqual(true);
});
test('and will create an `AndCondition`', () => {
    expect(Condition_1.conditionHelpers.and({ type: 'EQUAL', value: 2 }, { type: 'EQUAL', value: 3 }))
        .toEqual({ type: 'AND', conditions: [{ type: 'EQUAL', value: 2 }, { type: 'EQUAL', value: 3 }] });
});
test('and will filter out trues when creating an `AndCondition`', () => {
    expect(Condition_1.conditionHelpers.and(true, { type: 'EQUAL', value: 2 }, true, true, { type: 'EQUAL', value: 3 }))
        .toEqual({ type: 'AND', conditions: [{ type: 'EQUAL', value: 2 }, { type: 'EQUAL', value: 3 }] });
});
test('and will return a single condition if just one was provided', () => {
    expect(Condition_1.conditionHelpers.and({ type: 'EQUAL', value: 2 }))
        .toEqual({ type: 'EQUAL', value: 2 });
});
test('and will return a single condition if only that condition and true was provided', () => {
    expect(Condition_1.conditionHelpers.and(true, { type: 'EQUAL', value: 2 }, true, true))
        .toEqual({ type: 'EQUAL', value: 2 });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZGl0aW9uLXRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaW50ZXJmYWNlL2NvbGxlY3Rpb24vX190ZXN0c19fL0NvbmRpdGlvbi10ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0QkFBaUMsY0FFakMsQ0FBQyxDQUY4QztBQUUvQyxJQUFJLENBQUMsNkNBQTZDLEVBQUU7SUFDbEQsTUFBTSxDQUFDLE1BQU0sNEJBQWdCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsaURBQWlELENBQUMsQ0FBQTtBQUNqRyxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyw2Q0FBNkMsRUFBRTtJQUNsRCxNQUFNLENBQUMsNEJBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDbkcsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsc0NBQXNDLEVBQUU7SUFDM0MsTUFBTSxDQUFDLDRCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDMUUsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsbUNBQW1DLEVBQUU7SUFDeEMsTUFBTSxDQUFDLDRCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNuRixPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNyRyxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQywyREFBMkQsRUFBRTtJQUNoRSxNQUFNLENBQUMsNEJBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3JHLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3JHLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLDZEQUE2RCxFQUFFO0lBQ2xFLE1BQU0sQ0FBQyw0QkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3RELE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDekMsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsaUZBQWlGLEVBQUU7SUFDdEYsTUFBTSxDQUFDLDRCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDeEUsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUN6QyxDQUFDLENBQUMsQ0FBQSJ9