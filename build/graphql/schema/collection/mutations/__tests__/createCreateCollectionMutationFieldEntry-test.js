"use strict";
jest.mock('../../../getGqlType');
jest.mock('../../../createMutationGqlField');
jest.mock('../../getCollectionGqlType');
const getGqlType_1 = require('../../../getGqlType');
const createMutationGqlField_1 = require('../../../createMutationGqlField');
const getCollectionGqlType_1 = require('../../getCollectionGqlType');
const createCreateCollectionMutationFieldEntry_1 = require('../createCreateCollectionMutationFieldEntry');
createMutationGqlField_1.default.mockImplementation((buildToken, config) => Object.assign(config, { buildToken }));
test('will return undefined if create is not defined', () => {
    expect(createCreateCollectionMutationFieldEntry_1.default({}, {})).toBe(undefined);
});
test('will create a field entry with the correct name', () => {
    const buildToken = Symbol('buildToken');
    const type = { name: 'person' };
    const collection = { name: 'people', type, create: true };
    const fieldEntry = createCreateCollectionMutationFieldEntry_1.default(buildToken, collection);
    expect(fieldEntry[0]).toBe('createPerson');
    expect(fieldEntry[1].buildToken).toBe(buildToken);
    expect(fieldEntry[1].name).toBe('create-person');
});
test('will create a field entry with the correct input fields', () => {
    getGqlType_1.default.mockClear();
    const gqlType = Symbol('gqlType');
    getGqlType_1.default.mockReturnValueOnce(gqlType);
    const buildToken = Symbol('buildToken');
    const type = { name: 'person' };
    const collection = { name: 'people', type, create: true };
    const fieldEntry = createCreateCollectionMutationFieldEntry_1.default(buildToken, collection);
    expect(fieldEntry[1].inputFields).toEqual([['person', { type: gqlType, description: 'The `` to be created by this mutation.' }]]);
    expect(getGqlType_1.default.mock.calls).toEqual([[buildToken, type, true]]);
});
test('will create a field entry with output fields and no paginator', () => {
    const gqlCollectionType = Symbol('gqlCollectionType');
    getCollectionGqlType_1.default.mockClear();
    getCollectionGqlType_1.default.mockReturnValueOnce(gqlCollectionType);
    const value = Symbol('value');
    const buildToken = Symbol('buildToken');
    const type = { name: 'person' };
    const collection = { name: 'people', type, create: true };
    const fieldEntry = createCreateCollectionMutationFieldEntry_1.default(buildToken, collection);
    expect(fieldEntry[1].outputFields[0][0]).toBe('person');
    expect(fieldEntry[1].outputFields[0][1].type).toBe(gqlCollectionType);
    expect(fieldEntry[1].outputFields[0][1].resolve(value)).toBe(value);
    expect(fieldEntry[1].outputFields[1]).toBeFalsy();
    expect(getCollectionGqlType_1.default.mock.calls).toEqual([[buildToken, collection]]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlQ3JlYXRlQ29sbGVjdGlvbk11dGF0aW9uRmllbGRFbnRyeS10ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2dyYXBocWwvc2NoZW1hL2NvbGxlY3Rpb24vbXV0YXRpb25zL19fdGVzdHNfXy9jcmVhdGVDcmVhdGVDb2xsZWN0aW9uTXV0YXRpb25GaWVsZEVudHJ5LXRlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQTtBQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxDQUFDLENBQUE7QUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFBO0FBRXZDLDZCQUF1QixxQkFDdkIsQ0FBQyxDQUQyQztBQUM1Qyx5Q0FBbUMsaUNBQ25DLENBQUMsQ0FEbUU7QUFDcEUsdUNBQWlDLDRCQUNqQyxDQUFDLENBRDREO0FBQzdELDJEQUFxRCw2Q0FFckQsQ0FBQyxDQUZpRztBQUVsRyxnQ0FBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFVBQVUsRUFBRSxNQUFNLEtBQUssTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFeEcsSUFBSSxDQUFDLGdEQUFnRCxFQUFFO0lBQ3JELE1BQU0sQ0FBQyxrREFBd0MsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDMUUsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsaURBQWlELEVBQUU7SUFDdEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ3ZDLE1BQU0sSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFBO0lBQy9CLE1BQU0sVUFBVSxHQUFHLEVBQUUsSUFBSSxFQUFF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