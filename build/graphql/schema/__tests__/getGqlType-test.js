"use strict";
const graphql_1 = require('graphql');
const interface_1 = require('../../../interface');
const transformGqlInputValue_1 = require('../transformGqlInputValue');
const getGqlType_1 = require('../getGqlType');
const mockBuildToken = ({ _typeOverrides = new Map(), } = {}) => ({
    inventory: {
        getCollections: () => [],
    },
    _typeOverrides,
});
const mockEnumType = () => new interface_1.EnumType({ name: 'enoom', variants: ['a', 'b', 'c'] });
const mockObjectType = () => new interface_1.ObjectType({
    name: 'yo',
    description: 'yoyoyo',
    fields: new Map([
        ['a', { type: interface_1.booleanType, description: 'aaaa!' }],
        ['b', { type: new interface_1.NullableType(interface_1.booleanType) }]
    ]),
});
test('will return the exact same thing for types that are both inputs and outputs', () => {
    const buildToken = mockBuildToken();
    const enumType = mockEnumType();
    const objectType = mockObjectType();
    expect(getGqlType_1.default(buildToken, enumType, false)).toBe(getGqlType_1.default(buildToken, enumType, true));
    expect(getGqlType_1.default(buildToken, objectType, false)).not.toBe(getGqlType_1.default(buildToken, objectType, true));
});
test('is memoized', () => {
    const buildToken1 = mockBuildToken();
    const buildToken2 = mockBuildToken();
    const enumType = mockEnumType();
    const objectType = mockObjectType();
    expect(getGqlType_1.default(buildToken1, enumType, false)).toBe(getGqlType_1.default(buildToken1, enumType, false));
    expect(getGqlType_1.default(buildToken1, enumType, true)).toBe(getGqlType_1.default(buildToken1, enumType, true));
    expect(getGqlType_1.default(buildToken1, objectType, false)).toBe(getGqlType_1.default(buildToken1, objectType, false));
    expect(getGqlType_1.default(buildToken1, objectType, true)).toBe(getGqlType_1.default(buildToken1, objectType, true));
    expect(getGqlType_1.default(buildToken2, enumType, false)).toBe(getGqlType_1.default(buildToken2, enumType, false));
    expect(getGqlType_1.default(buildToken2, enumType, true)).toBe(getGqlType_1.default(buildToken2, enumType, true));
    expect(getGqlType_1.default(buildToken2, objectType, false)).toBe(getGqlType_1.default(buildToken2, objectType, false));
    expect(getGqlType_1.default(buildToken2, objectType, true)).toBe(getGqlType_1.default(buildToken2, objectType, true));
    expect(getGqlType_1.default(buildToken1, enumType, false)).not.toBe(getGqlType_1.default(buildToken2, enumType, false));
    expect(getGqlType_1.default(buildToken1, enumType, true)).not.toBe(getGqlType_1.default(buildToken2, enumType, true));
    expect(getGqlType_1.default(buildToken1, objectType, false)).not.toBe(getGqlType_1.default(buildToken2, objectType, false));
    expect(getGqlType_1.default(buildToken1, objectType, true)).not.toBe(getGqlType_1.default(buildToken2, objectType, true));
});
test('will invert nullable types', () => {
    const buildToken = mockBuildToken();
    const gqlType1 = getGqlType_1.default(buildToken, interface_1.booleanType, false);
    expect(gqlType1 instanceof graphql_1.GraphQLNonNull).toBe(true);
    expect(gqlType1.ofType).toBe(graphql_1.GraphQLBoolean);
    const gqlType2 = getGqlType_1.default(buildToken, new interface_1.NullableType(interface_1.booleanType), false);
    expect(gqlType2).toBe(graphql_1.GraphQLBoolean);
});
test('will remove many nullable wrappers', () => {
    const buildToken = mockBuildToken();
    const gqlType = getGqlType_1.default(buildToken, new interface_1.NullableType(new interface_1.NullableType(new interface_1.NullableType(interface_1.booleanType))), false);
    expect(gqlType).toBe(graphql_1.GraphQLBoolean);
});
test('will clone base types for aliases', () => {
    const buildToken = mockBuildToken();
    const gqlType1 = getGqlType_1.default(buildToken, new interface_1.AliasType({ name: 'yo', baseType: interface_1.booleanType }), false);
    expect(gqlType1 instanceof graphql_1.GraphQLNonNull).toBe(true);
    expect(Object.getPrototypeOf(gqlType1.ofType)).toBe(graphql_1.GraphQLBoolean);
    expect(gqlType1.ofType.name).toBe('Yo');
    const gqlType2 = getGqlType_1.default(buildToken, new interface_1.AliasType({ name: 'yo', baseType: new interface_1.NullableType(interface_1.booleanType) }), false);
    expect(Object.getPrototypeOf(gqlType2)).toBe(graphql_1.GraphQLBoolean);
    expect(gqlType2.name).toBe('Yo');
    const gqlType3 = getGqlType_1.default(buildToken, new interface_1.NullableType(new interface_1.AliasType({ name: 'yo', baseType: interface_1.booleanType })), false);
    expect(Object.getPrototypeOf(gqlType3)).toBe(graphql_1.GraphQLBoolean);
    expect(gqlType3.name).toBe('Yo');
});
test('will create lists correctly', () => {
    const buildToken = mockBuildToken();
    const gqlType1 = getGqlType_1.default(buildToken, new interface_1.ListType(interface_1.booleanType), false);
    expect(gqlType1 instanceof graphql_1.GraphQLNonNull).toBe(true);
    expect(gqlType1.ofType instanceof graphql_1.GraphQLList).toBe(true);
    expect(gqlType1.ofType.ofType instanceof graphql_1.GraphQLNonNull).toBe(true);
    expect(gqlType1.ofType.ofType.ofType).toBe(graphql_1.GraphQLBoolean);
    const gqlType2 = getGqlType_1.default(buildToken, new interface_1.NullableType(new interface_1.ListType(new interface_1.NullableType(interface_1.booleanType))), false);
    expect(gqlType2 instanceof graphql_1.GraphQLList).toBe(true);
    expect(gqlType2.ofType).toBe(graphql_1.GraphQLBoolean);
});
test('will correctly create enums', () => {
    const buildToken = mockBuildToken();
    const gqlType = getGqlType_1.default(buildToken, new interface_1.NullableType(mockEnumType()), false);
    expect(gqlType instanceof graphql_1.GraphQLEnumType).toBe(true);
    expect(gqlType.name).toBe('Enoom');
    expect(gqlType.getValues().map(({ name }) => name)).toEqual(['A', 'B', 'C']);
});
test('will correctly return primitive types', () => {
    const buildToken = mockBuildToken();
    expect(getGqlType_1.default(buildToken, new interface_1.NullableType(interface_1.booleanType), false)).toBe(graphql_1.GraphQLBoolean);
    expect(getGqlType_1.default(buildToken, new interface_1.NullableType(interface_1.integerType), false)).toBe(graphql_1.GraphQLInt);
    expect(getGqlType_1.default(buildToken, new interface_1.NullableType(interface_1.floatType), false)).toBe(graphql_1.GraphQLFloat);
    expect(getGqlType_1.default(buildToken, new interface_1.NullableType(interface_1.stringType), false)).toBe(graphql_1.GraphQLString);
});
test('will correctly make an object output type', () => {
    const buildToken = mockBuildToken();
    const gqlType = getGqlType_1.default(buildToken, new interface_1.NullableType(mockObjectType()), false);
    expect(gqlType instanceof graphql_1.GraphQLObjectType).toBe(true);
    expect(gqlType.name).toBe('Yo');
    expect(gqlType.description).toBe('yoyoyo');
    expect(gqlType.getFields().a.name).toBe('a');
    expect(gqlType.getFields().a.description).toBe('aaaa!');
    expect(gqlType.getFields().a.type instanceof graphql_1.GraphQLNonNull).toBe(true);
    expect(gqlType.getFields().a.type.ofType).toBe(graphql_1.GraphQLBoolean);
    expect(gqlType.getFields().b.name).toBe('b');
    expect(gqlType.getFields().b.description).toBe(undefined);
    expect(gqlType.getFields().b.type).toBe(graphql_1.GraphQLBoolean);
});
test('will correctly make an input object type', () => {
    const buildToken = mockBuildToken();
    const gqlType = getGqlType_1.default(buildToken, new interface_1.NullableType(mockObjectType()), true);
    expect(gqlType instanceof graphql_1.GraphQLInputObjectType).toBe(true);
    expect(gqlType.name).toBe('YoInput');
    expect(gqlType.description).toBe('yoyoyo');
    expect(gqlType.getFields().a.name).toBe('a');
    expect(gqlType.getFields().a.description).toBe('aaaa!');
    expect(gqlType.getFields().a.type instanceof graphql_1.GraphQLNonNull).toBe(true);
    expect(gqlType.getFields().a.type.ofType).toBe(graphql_1.GraphQLBoolean);
    expect(gqlType.getFields().a[transformGqlInputValue_1.$$gqlInputObjectTypeValueKeyName]).toBe('a');
    expect(gqlType.getFields().b.name).toBe('b');
    expect(gqlType.getFields().b.description).toBe(undefined);
    expect(gqlType.getFields().b.type).toBe(graphql_1.GraphQLBoolean);
    expect(gqlType.getFields().b[transformGqlInputValue_1.$$gqlInputObjectTypeValueKeyName]).toBe('b');
});
test('will use type overrides', () => {
    const a = Symbol('a');
    const b = Symbol('b');
    const c = Symbol('c');
    const d = Symbol('d');
    const buildToken = mockBuildToken({
        _typeOverrides: new Map([
            [interface_1.stringType, { input: a, output: b }],
            [interface_1.booleanType, { input: c }],
            [interface_1.integerType, { output: d }],
        ]),
    });
    expect(getGqlType_1.default(buildToken, interface_1.stringType, true)).toEqual(a);
    expect(getGqlType_1.default(buildToken, interface_1.stringType, false)).toEqual(b);
    expect(getGqlType_1.default(buildToken, interface_1.booleanType, true)).toEqual(c);
    expect(getGqlType_1.default(buildToken, interface_1.booleanType, false)).toEqual(new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean));
    expect(getGqlType_1.default(buildToken, interface_1.integerType, true)).toEqual(new graphql_1.GraphQLNonNull(graphql_1.GraphQLInt));
    expect(getGqlType_1.default(buildToken, interface_1.integerType, false)).toEqual(d);
    expect(getGqlType_1.default(buildToken, interface_1.floatType, true)).toEqual(new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat));
    expect(getGqlType_1.default(buildToken, interface_1.floatType, false)).toEqual(new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat));
});
test('_getJsonGqlType will create a boring JSON type with no dynamic input', () => {
    const jsonGqlType = getGqlType_1._getJsonGqlType({ options: { dynamicJson: false } });
    expect(jsonGqlType.serialize('{"a":1,"b":2,"c":3}')).toEqual('{"a":1,"b":2,"c":3}');
    expect(jsonGqlType.parseValue('{"a":1,"b":2,"c":3}')).toEqual('{"a":1,"b":2,"c":3}');
    expect(jsonGqlType.parseLiteral({ kind: graphql_1.Kind.STRING, value: '{"a":1,"b":2,"c":3}' })).toEqual('{"a":1,"b":2,"c":3}');
    expect(jsonGqlType.parseLiteral({ kind: graphql_1.Kind.BOOLEAN, value: true })).toEqual(null);
    expect(jsonGqlType.parseLiteral({ kind: graphql_1.Kind.INT, value: 20 })).toEqual(null);
    expect(jsonGqlType.parseLiteral({ kind: graphql_1.Kind.FLOAT, value: 3.1415 })).toEqual(null);
    expect(jsonGqlType.parseLiteral({ kind: graphql_1.Kind.OBJECT, fields: [{ name: { value: 'a' }, value: { kind: graphql_1.Kind.INT, value: 1 } }, { name: { value: 'b' }, value: { kind: graphql_1.Kind.INT, value: 2 } }] })).toEqual(null);
    expect(jsonGqlType.parseLiteral({ kind: graphql_1.Kind.LIST, values: [{ kind: graphql_1.Kind.INT, value: 1 }, { kind: graphql_1.Kind.INT, value: 2 }, { kind: graphql_1.Kind.INT, value: 3 }] })).toEqual(null);
});
test('_getJsonGqlType will create a dynamic JSON type', () => {
    const jsonGqlType = getGqlType_1._getJsonGqlType({ options: { dynamicJson: true } });
    expect(jsonGqlType.serialize('{"a":1,"b":2,"c":3}')).toEqual({ a: 1, b: 2, c: 3 });
    expect(jsonGqlType.parseValue({ a: 1, b: 2, c: 3 })).toEqual('{"a":1,"b":2,"c":3}');
    expect(jsonGqlType.parseLiteral({ kind: graphql_1.Kind.STRING, value: 'hello, world!' })).toEqual('"hello, world!"');
    expect(jsonGqlType.parseLiteral({ kind: graphql_1.Kind.BOOLEAN, value: true })).toEqual('true');
    expect(jsonGqlType.parseLiteral({ kind: graphql_1.Kind.INT, value: 20 })).toEqual('20');
    expect(jsonGqlType.parseLiteral({ kind: graphql_1.Kind.FLOAT, value: 3.1415 })).toEqual('3.1415');
    expect(jsonGqlType.parseLiteral({ kind: graphql_1.Kind.OBJECT, fields: [{ name: { value: 'a' }, value: { kind: graphql_1.Kind.INT, value: 1 } }, { name: { value: 'b' }, value: { kind: graphql_1.Kind.INT, value: 2 } }] })).toEqual('{"a":1,"b":2}');
    expect(jsonGqlType.parseLiteral({ kind: graphql_1.Kind.LIST, values: [{ kind: graphql_1.Kind.INT, value: 1 }, { kind: graphql_1.Kind.INT, value: 2 }, { kind: graphql_1.Kind.INT, value: 3 }] })).toEqual('[1,2,3]');
});
//# sourceMappingURL=data:application/json;base64,