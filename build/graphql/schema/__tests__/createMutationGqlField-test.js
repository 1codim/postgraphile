"use strict";
jest.mock('../getQueryGqlType');
const graphql_1 = require('graphql');
const getQueryGqlType_1 = require('../getQueryGqlType');
const createMutationGqlField_1 = require('../createMutationGqlField');
// Create a new object where `GraphQLString` is the prototype. This means it
// will have the exact same behavior as `GraphQLString`, however
// `queryType !== GraphQLString` which is nice for tests.
const queryType = Object.create(graphql_1.GraphQLString);
getQueryGqlType_1.default.mockReturnValue(queryType);
test('will only create a single input argument', () => {
    const field = createMutationGqlField_1.default({}, { name: 'foo' });
    expect(Object.keys(field.args)).toEqual(['input']);
});
test('will create a non-null input type for the input argument with the correct name', () => {
    const field = createMutationGqlField_1.default({}, { name: 'foo' });
    expect(field.args.input.type instanceof graphql_1.GraphQLNonNull).toBe(true);
    expect(field.args.input.type.ofType instanceof graphql_1.GraphQLInputObjectType).toBe(true);
    expect(field.args.input.type.ofType.name).toBe('FooInput');
});
test('will always add a `clientMutationId` field to input objects', () => {
    const field = createMutationGqlField_1.default({}, { name: 'foo' });
    expect(Object.keys(field.args.input.type.ofType.getFields())).toEqual(['clientMutationId']);
    expect(field.args.input.type.ofType.getFields().clientMutationId.type).toEqual(graphql_1.GraphQLString);
});
test('will add extra input fields from the config and skip falsies', () => {
    const inputFields = [
        ['a', { name: 'a', type: graphql_1.GraphQLString }],
        null,
        ['b', { name: 'b', type: graphql_1.GraphQLString }],
        ['c', { name: 'c', type: graphql_1.GraphQLString }],
    ];
    const field = createMutationGqlField_1.default({}, { name: 'foo', inputFields });
    expect(Object.keys(field.args.input.type.ofType.getFields())).toEqual(['clientMutationId', 'a', 'b', 'c']);
    expect(field.args.input.type.ofType.getFields().a).toEqual(inputFields[0][1]);
    expect(field.args.input.type.ofType.getFields().b).toEqual(inputFields[2][1]);
    expect(field.args.input.type.ofType.getFields().c).toEqual(inputFields[3][1]);
});
test('will return an object payload type', () => {
    const field = createMutationGqlField_1.default({}, { name: 'foo' });
    expect(field.type instanceof graphql_1.GraphQLObjectType).toBe(true);
    expect(field.type.name).toBe('FooPayload');
});
test('will always include `clientMutationId` and `query` fields', () => {
    getQueryGqlType_1.default.mockClear();
    const buildToken = Symbol('buildToken');
    const clientMutationId = Symbol('clientMutationId');
    const field = createMutationGqlField_1.default(buildToken, { name: 'foo' });
    expect(Object.keys(field.type.getFields())).toEqual(['clientMutationId', 'query']);
    expect(field.type.getFields().clientMutationId.type).toBe(graphql_1.GraphQLString);
    expect(field.type.getFields().clientMutationId.resolve({ clientMutationId })).toBe(clientMutationId);
    expect(field.type.getFields().query.type).toBe(queryType);
    expect(field.type.getFields().query.resolve()).toBe(getQueryGqlType_1.$$isQuery);
    expect(getQueryGqlType_1.default.mock.calls).toEqual([[buildToken]]);
});
test('will add `outputFields` in payload type and skip falsies', () => {
    const resolve = Symbol('resolve');
    const description = Symbol('description');
    const deprecationReason = Symbol('deprecationReason');
    const outputFields = [
        ['a', { type: graphql_1.GraphQLString }],
        null,
        ['b', { type: graphql_1.GraphQLString }],
        ['c', { type: graphql_1.GraphQLString, args: { arg: { type: graphql_1.GraphQLString } }, resolve, description, deprecationReason }],
    ];
    const field = createMutationGqlField_1.default({}, { name: 'foo', outputFields });
    expect(Object.keys(field.type.getFields())).toEqual(['clientMutationId', 'a', 'b', 'c', 'query']);
    expect(field.type.getFields().a).toEqual({ name: 'a', type: graphql_1.GraphQLString, args: [], resolve: null, isDeprecated: false });
    expect(field.type.getFields().b).toEqual({ name: 'b', type: graphql_1.GraphQLString, args: [], resolve: null, isDeprecated: false });
    expect(field.type.getFields().c).toEqual({ name: 'c', type: graphql_1.GraphQLString, args: [{ name: 'arg', type: graphql_1.GraphQLString, defaultValue: undefined, description: null }], resolve: field.type.getFields().c.resolve, description, deprecationReason, isDeprecated: true });
});
test('will proxy the resolved value to the resolver in `outputFields`', () => {
    const value = Symbol('value');
    const resolvedValue = Symbol('resolvedValue');
    const restArgs = [Symbol(), Symbol(), Symbol()];
    const resolve = jest.fn(() => resolvedValue);
    const field = createMutationGqlField_1.default({}, { name: 'foo', outputFields: [['a', { type: graphql_1.GraphQLString, resolve }]] });
    expect(field.type.getFields().a.resolve({ value }, ...restArgs)).toBe(resolvedValue);
    expect(resolve.mock.calls).toEqual([[value, ...restArgs]]);
});
// test('resolve will call the execute function with the correct arguments', async () => {
//   const context = new Context()
//   const clientMutationId = Symbol('clientMutationId')
//   const input = { clientMutationId, a: 1, b: 2, c: 3 }
//   const value = Symbol('value')
//   const execute = jest.fn(() => value)
//   const field = createMutationGqlField({}, { name: 'foo', execute })
//   expect(await field.resolve({}, { input }, context)).toEqual({ clientMutationId, value })
//   expect(execute.mock.calls).toEqual([[context, input]])
// })
//# sourceMappingURL=data:application/json;base64,