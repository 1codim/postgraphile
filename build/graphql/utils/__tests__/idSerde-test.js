"use strict";
jest.mock('../../../interface/Inventory');
const ObjectType_1 = require('../../../interface/type/ObjectType');
const Inventory_1 = require('../../../interface/Inventory');
const idSerde_1 = require('../idSerde');
const mockObjectType = () => new ObjectType_1.default({
    name: 'hello-type',
    fields: new Map([
        ['b', { type: { isTypeOf: () => true } }],
        ['a', { type: { isTypeOf: () => true } }],
        ['c', { type: { isTypeOf: () => true } }],
    ]),
});
test('serialize will create a base64 encoded key value for a collection key', () => {
    const collection = { name: 'hello', primaryKey: { keyType: null, getKeyFromValue: jest.fn(x => x) } };
    expect(idSerde_1.default.serialize(collection, 'world')).toEqual('WyJoZWxsbyIsIndvcmxkIl0=');
    expect(collection.primaryKey.getKeyFromValue.mock.calls).toEqual([['world']]);
});
test('serialize will give object types a special treatment create a base64 encoded key value for a collection key', () => {
    const value = Symbol();
    const collection = {
        name: 'hello',
        primaryKey: { keyType: mockObjectType(), getKeyFromValue: jest.fn(() => new Map([['a', 1], ['b', 2], ['c', 3]])) },
    };
    expect(idSerde_1.default.serialize(collection, value)).toEqual('WyJoZWxsbyIsMiwxLDNd');
    expect(collection.primaryKey.getKeyFromValue.mock.calls).toEqual([[value]]);
});
test('deserialize will turn an id into a collection key and key value', () => {
    const inventory = new Inventory_1.default();
    const collectionKey = { keyType: { isTypeOf: jest.fn(() => true) } };
    const collection = { primaryKey: collectionKey };
    inventory.getCollection.mockReturnValue(collection);
    expect(idSerde_1.default.deserialize(inventory, 'WyJoZWxsbyIsIndvcmxkIl0=')).toEqual({ collection, keyValue: 'world' });
    expect(inventory.getCollection.mock.calls).toEqual([['hello']]);
    expect(collectionKey.keyType.isTypeOf.mock.calls).toEqual([['world']]);
});
test('deserialize will turn an id into a collection key and key value even if the key type is an object type', () => {
    const inventory = new Inventory_1.default();
    const collectionKey = { keyType: mockObjectType() };
    const collection = { primaryKey: collectionKey };
    inventory.getCollection.mockReturnValue(collection);
    collectionKey.keyType.isTypeOf = jest.fn(collectionKey.keyType.isTypeOf);
    expect(idSerde_1.default.deserialize(inventory, 'WyJoZWxsbyIsMiwxLDNd')).toEqual({ collection, keyValue: new Map([['b', 2], ['a', 1], ['c', 3]]) });
    expect(inventory.getCollection.mock.calls).toEqual([['hello']]);
    expect(collectionKey.keyType.isTypeOf.mock.calls).toEqual([[new Map([['b', 2], ['a', 1], ['c', 3]])]]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRTZXJkZS10ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2dyYXBocWwvdXRpbHMvX190ZXN0c19fL2lkU2VyZGUtdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFBO0FBRXpDLDZCQUF1QixvQ0FDdkIsQ0FBQyxDQUQwRDtBQUMzRCw0QkFBc0IsOEJBQ3RCLENBQUMsQ0FEbUQ7QUFDcEQsMEJBQW9CLFlBRXBCLENBQUMsQ0FGK0I7QUFFaEMsTUFBTSxjQUFjLEdBQUcsTUFDckIsSUFBSSxvQkFBVSxDQUFDO0lBQ2IsSUFBSSxFQUFFLFlBQVk7SUFDbEIsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDO1FBQ2QsQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxJQUFJLEVBQUUsRUFBRSxDQUFDO1FBQ3pDLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sSUFBSSxFQUFFLEVBQUUsQ0FBQztRQUN6QyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxNQUFNLElBQUksRUFBRSxFQUFFLENBQUM7S0FDMUMsQ0FBQztDQUNILENBQUMsQ0FBQTtBQUVKLElBQUksQ0FBQyx1RUFBdUUsRUFBRTtJQUM1RSxNQUFNLFVBQVUsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFBO0lBQ3JHLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtJQUNs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